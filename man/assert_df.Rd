% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assert_df.R
\name{assert_df}
\alias{assert_df}
\alias{assert_between_boundaries}
\alias{assert_between_n_std}
\alias{assert_col_types}
\alias{assert_none_missing}
\alias{assert_unique}
\alias{assert_dim}
\alias{assert_rows_after}
\title{Assert Functions on Data Frames}
\usage{
assert_between_boundaries(func, dict)

assert_between_n_std(func, dict)

assert_col_types(func, dict)

assert_none_missing(func, cols = NULL)

assert_unique(func, cols = NULL)

assert_dim(func, dim)

assert_rows_after(func, condition = "e")
}
\arguments{
\item{func}{function that returns a data.frame}

\item{dict}{list where the names are columns of output, values are arguments for function}

\item{cols}{character vector of columns to check for}

\item{dim}{numeric vector, index 1 for rows, index 2 for columns, leave NA if don't care about a dimension}

\item{condition}{character, options c('e', 'g', 'ge', 'l', 'le')}
}
\value{
data.frame
}
\description{
Wrappers to check that the data frame a function returns satisfies current conditions \cr
* `assert_between_boundaries()` columns are between certain boundaries \cr
* `assert_between_n_std()` columns are between n standard deviations \cr
* `assert_col_types()` columns are of specified types \cr
* `assert_none_missing()` columns are not NA \cr
* `assert_unique()` columns are unique \cr
* `assert_dim()` df has dimensions, can leave \cr
* `assert_rows_after()` df rows satisfies certain conditions over original
}
